// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StatusListReader is a Reader for the StatusList structure.
type StatusListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StatusListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStatusListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewStatusListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewStatusListOK creates a StatusListOK with default headers values
func NewStatusListOK() *StatusListOK {
	return &StatusListOK{}
}

/* StatusListOK describes a response with status code 200, with default header values.

StatusListOK status list o k
*/
type StatusListOK struct {
	Payload interface{}
}

func (o *StatusListOK) Error() string {
	return fmt.Sprintf("[GET /status/][%d] statusListOK  %+v", 200, o.Payload)
}
func (o *StatusListOK) GetPayload() interface{} {
	return o.Payload
}

func (o *StatusListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStatusListDefault creates a StatusListDefault with default headers values
func NewStatusListDefault(code int) *StatusListDefault {
	return &StatusListDefault{
		_statusCode: code,
	}
}

/* StatusListDefault describes a response with status code -1, with default header values.

StatusListDefault status list default
*/
type StatusListDefault struct {
	_statusCode int

	Payload interface{}
}

// Code gets the status code for the status list default response
func (o *StatusListDefault) Code() int {
	return o._statusCode
}

func (o *StatusListDefault) Error() string {
	return fmt.Sprintf("[GET /status/][%d] status_list default  %+v", o._statusCode, o.Payload)
}
func (o *StatusListDefault) GetPayload() interface{} {
	return o.Payload
}

func (o *StatusListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
